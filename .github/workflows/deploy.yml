name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
        
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: MYSQL_HOST,MYSQL_USER,MYSQL_PASSWORD,MYSQL_DATABASE
          script: |
            # Stop and remove existing container
            sudo docker stop todo-app || true
            sudo docker rm todo-app || true
            sudo docker rmi todo-app-image || true
            
            # Setup application directory
            cd /home/ec2-user
            sudo rm -rf todo-app
            sudo mkdir -p todo-app
            sudo chown -R ec2-user:ec2-user todo-app
            cd todo-app
            
            # Clone repository (fresh copy)
            git clone https://github.com/g3-cloud-computing-project/cloud-computing-project.git .
            
            # Create .env file
            cat > .env << EOF
            MYSQL_HOST=${MYSQL_HOST}
            MYSQL_USER=${MYSQL_USER}
            MYSQL_PASSWORD=${MYSQL_PASSWORD}
            MYSQL_DATABASE=${MYSQL_DATABASE}
            EOF
            
            # Create Dockerfile for the application
            cat > Dockerfile << EOF
            FROM node:18-alpine
            WORKDIR /app
            COPY . .
            RUN yarn install
            EXPOSE 3000
            CMD ["yarn", "run", "dev"]
            EOF
            
            # Build new image
            sudo docker build -t todo-app-image .
            
            # Run new container
            sudo docker run -d \
              --name todo-app \
              -p 3000:3000 \
              --env-file .env \
              todo-app-image
            
            # Wait for application to start
            echo "Waiting for application to start..."
            sleep 10
            
            # Check logs
            echo "Container logs:"
            sudo docker logs todo-app
